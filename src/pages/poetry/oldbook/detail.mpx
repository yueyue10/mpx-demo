<template>
  <view class="container">
    <view class="chapterName">{{bookInfo.title}}</view>
    <view wx:for="{{bookInfo.paragraphs}}" wx:key="*this">
      <text class="paragraphs">{{item}}</text>
    </view>
  </view>

  <view class="chapter-func">
    <button class="chapter-btn" hover-class="chapter-btn_hover" size="mini" bindtap="showChapterMenuClick">目录
    </button>
    <button wx:if="{{hasPre}}" class="chapter-btn" hover-class="chapter-btn_hover" size="mini"
            bindtap="onChapterClick" data-flag="pre">上一章
    </button>
    <button wx:if="{{hasNext}}" class="chapter-btn" hover-class="chapter-btn_hover" size="mini"
            bindtap="onChapterClick" data-flag="next">下一章
    </button>
  </view>

  <view class="chapterMenuLayout {{showChapterMenu?'chapterMenu_show':'chapterMenu_hide'}}">
    <scroll-view class="scroll-chapterMenu" scroll-y="true">
      <view class="chapterMenu-title">目录</view>
      <block wx:for="{{chapterMenu}}" wx:key="*this" wx:for-index="idx">
        <view class="chapter-item" style="{{idx==curIndex?'color:#f1d20b':''}}" bindtap="onChapterItemClick"
              data-index="{{idx}}">
          {{item}}
        </view>
      </block>
    </scroll-view>
    <view class="empty-view" bindtap="onMenuEmptyClick"></view>
  </view>
</template>

<script>
    import { createPage } from '@mpxjs/core'
    import { getRequest } from '../../../libs/httputils'

    createPage({
        data: {
            bookName: '',
            bookInfo: {},
            curIndex: 0,
            hasPre: false,
            hasNext: false,
            chapterMenu: [],
            showChapterMenu: false
        },
        onLoad(options) {
            // console.log(options)
            let curIndex = decodeURIComponent(options.curIndex)
            let bookName = decodeURIComponent(options.bookName)
            wx.setNavigationBarTitle({
                title: bookName
            })
            this.bookName = bookName
            this.getBookInfo(bookName, curIndex)
        },
        onShareAppMessage(shareOption) {
            return {
                title: '史书典籍',
                imageUrl: 'https://zhaoyj.work/image/ic_poetry_grade.png',
                extra: {
                    videoTopics: ['诗词古文'], // 只有抖音支持该属性
                    videoPath: ''
                }
            }
        },
        showShareMenu(){

        },
        methods: {
            getBookInfo(bookName, curIndex) {
                getRequest('/poetry/book/info', { bookName }).then(res => {
                    let oldBooks = res
                    oldBooks.forEach(oldBook => {
                        // console.log(oldBook.chapters)
                        oldBook.chapters = JSON.parse(oldBook.chapters)
                    })
                    let oldBook = oldBooks[0]
                    // console.log('oldBook', oldBook)
                    this.bookName = oldBook.bookName
                    this.chapterMenu = oldBook.chapters
                    this.getChapterParagraph(curIndex)
                })
            },
            //获取目录下的内容
            getChapterParagraph(index) {
                let bookName = this.bookName
                let chapterMenu = this.chapterMenu
                let chapter = chapterMenu[index]
                getRequest('/poetry/book/chapter', { bookName, chapter }).then(res => {
                    // console.log('content', res)
                    let bookInfos = res
                    bookInfos.forEach(bookInfo => {
                        // console.log(bookInfo.paragraphs)
                        bookInfo.paragraphs = JSON.parse(bookInfo.paragraphs)
                        // console.log(bookInfo.paragraphs)
                    })
                    this.bookInfo = bookInfos[0]
                    this.curIndex = parseInt(index)
                    this.getPageData()
                })
            },
            getPageData() {
                let curIndex = this.curIndex
                let chapterMenu = this.chapterMenu
                //是否有上一页或者下一页
                let hasPre = true
                if (curIndex == 0)
                    hasPre = false
                let hasNext = true
                if (curIndex == chapterMenu.length - 1)
                    hasNext = false
                this.hasPre = hasPre
                this.hasNext = hasNext
                this.backTop()
            },
            //上一章或下一章点击监听
            onChapterClick(e) {
                // console.log(e)
                let curIndex = this.curIndex
                let flag = e.currentTarget.dataset.flag
                let mIndex = curIndex - 1
                if (flag == 'next')
                    mIndex = curIndex + 1
                this.getChapterParagraph(mIndex)
            },
            //章节目录按钮点击监听
            showChapterMenuClick(e) {
                this.setData({
                    showChapterMenu: true
                })
            },
            //背景点击监听
            onMenuEmptyClick() {
                setTimeout(() => {
                    this.setData({
                        showChapterMenu: false
                    })
                }, 300)
            },
            //章节item点击监听
            onChapterItemClick(e) {
                console.log(e)
                let itemIndex = e.currentTarget.dataset.index
                this.getChapterParagraph(itemIndex)
                this.onMenuEmptyClick()
            },
            // 滚动到顶部
            backTop() {
                // 控制滚动
                wx.pageScrollTo({
                    scrollTop: 0
                })
            }
        }
    })
</script>

<style scoped>
  text {
    display: flex;
    font-family: PingFangSC-Regular;
    font-weight: 500;
    line-height: 25px;
  }

  .container {
    width: calc(100% - 15px);
    padding: 15px;
    background: #d6cebf;
  }

  .chapterName {
    text-align: center;
    font-size: larger;
    font-weight: 600;
    margin-bottom: 10px;
  }

  .paragraphs {
    margin-bottom: 5px;
  }


  .chapter-func {
    width: 80px;
    position: fixed;
    right: -20px;
    top: 40%;
    /* background: blue; */
  }

  .chapter-btn {
    color: white;
    margin: 4px 0px;
    background: #ad605a;
  }

  .chapter-btn_hover {
    background: #c64b42;
  }

  .chapterMenuLayout {
    top: 0px;
    left: 0px;
    width: 100%;
    height: 100%;
    position: fixed;
    display: flex;
    z-index: 10;
  }

  .chapterMenu_show {
    /* 动画 */
    transform: scaleX(1);
    transition: transform 0.8s;
    transform-origin: left center;
  }

  .chapterMenu_hide {
    /* 动画 */
    transform: scaleX(0);
    transition: transform 0.8s;
    transform-origin: left center;
  }

  .scroll-chapterMenu {
    width: 80%;
    background: #6d6b68;
  }

  .chapterMenu-title {
    margin: 10px;
    text-align: center;
    font-size: 18px;
    font-weight: 600;
  }

  .chapter-item {
    /* color: #ed9f35; */
    color: #d5a55f;
    padding: 3px;
  }

  .empty-view {
    width: 20%;
    background: black;
    opacity: 0.4;
  }
</style>
